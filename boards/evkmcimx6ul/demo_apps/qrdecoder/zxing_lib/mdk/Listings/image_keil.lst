


ARM Macro Assembler    Page 1 


    1 00000000         ; Hand-optimised image processing functions.
    2 00000000         
    3 00000000                 AREA             |.text|, CODE, READONLY
    4 00000000                 THUMB
    5 00000000         
    6 00000000         ; void calculateBlockStatistics(uint32_t *results, uint8
                       _t *block, uint32_t stride)
    7 00000000         ;
    8 00000000         ; Calculates the sum, minimum and maximum of a 8x8 pixel
                        block.
    9 00000000         ; This relies heavily on ARM Cortex-M4 DSP instructions 
                       to achieve 3 cycles
   10 00000000         ; per pixel performance.
   11 00000000         ; Upon exit:
   12 00000000         ; results[0] = sum
   13 00000000         ; results[1] = min
   14 00000000         ; results[2] = max
   15 00000000                 EXPORT           calculateBlockStatistics
   16 00000000         calculateBlockStatistics
   17 00000000 E92D 0DF0       push             {r4, r5, r6, r7, r8, r10, r11}
   18 00000004         ; r5 = sum, r6 = min, r7 = max
   19 00000004 F05F 0800       movs             r8, #0      ; dummy zero regist
                                                            er for usada8 instr
                                                            uction
   20 00000008 2500            movs             r5, #0
   21 0000000A 2600            movs             r6, #0
   22 0000000C 1E76            subs             r6, r6, #1
   23 0000000E 2700            movs             r7, #0
   24 00000010 F05F 0B08       movs             r11, #8
   25 00000014         
   26 00000014         statsloop
   27 00000014         ; Load a row (8 pixels) of the block.
   28 00000014 E891 0018       ldm              r1, {r3, r4}
   29 00000018         ; usada8 accumulates the sum of differences between each
                        byte in r8 and r3.
   30 00000018         ; But since r8 is 0, this means that it will unsigned ad
                       d each byte in r3
   31 00000018         ; and accumulate into r5.
   32 00000018 FB78 5503       usada8           r5, r8, r3, r5
   33 0000001C         ; Likewise, this instruction sums each byte in r4 and ac
                       cumulates into r5.
   34 0000001C FB78 5504       usada8           r5, r8, r4, r5
   35 00000020         ; The usub8/sel combination selects the minimum of each 
                       byte in r3 and r6,
   36 00000020         ; then writes the minimum byte back into r6. r10 is used
                        as a dummy register
   37 00000020         ; since the result of usub8 (which we don't want) has to
                        go somewhere.
   38 00000020 FAC3 FA46       usub8            r10, r3, r6
   39 00000024 FAA6 F683       sel              r6, r6, r3
   40 00000028         ; Likewise, but finds minimum of r4 and r6.
   41 00000028 FAC4 FA46       usub8            r10, r4, r6
   42 0000002C FAA6 F684       sel              r6, r6, r4
   43 00000030         ; This usub8/sel combination has the two selection opera
                       nds swapped around
   44 00000030         ; so that instead of finding the minimum, it finds the m
                       aximum of each byte.
   45 00000030 FAC3 FA47       usub8            r10, r3, r7
   46 00000034 FAA3 F787       sel              r7, r3, r7



ARM Macro Assembler    Page 2 


   47 00000038 FAC4 FA47       usub8            r10, r4, r7
   48 0000003C FAA4 F787       sel              r7, r4, r7
   49 00000040         ; Move to next row in block.
   50 00000040 1889            adds             r1, r1, r2
   51 00000042 F1BB 0B01       subs             r11, r11, #1
   52 00000046 D1E5            bne.n            statsloop
   53 00000048         
   54 00000048         ; The above loop calculates the parallel (byte-wise) min
                       imum in r6.
   55 00000048         ; We still need to find the overall minimum of each byte
                        in r6.
   56 00000048 B2F1            uxtb             r1, r6
   57 0000004A FA5F F296       uxtb             r2, r6, ror #8
   58 0000004E         ; usub8/sel is faster than cmp/it/conditional move.
   59 0000004E FAC2 F341       usub8            r3, r2, r1
   60 00000052 FAA1 F182       sel              r1, r1, r2
   61 00000056 FA5F F2A6       uxtb             r2, r6, ror #16
   62 0000005A FAC2 F341       usub8            r3, r2, r1
   63 0000005E FAA1 F182       sel              r1, r1, r2
   64 00000062 FA5F F2B6       uxtb             r2, r6, ror #24
   65 00000066 FAC2 F341       usub8            r3, r2, r1
   66 0000006A FAA1 F682       sel              r6, r1, r2
   67 0000006E         ; Likewise, we still need to find the overall maximum of
                        each byte in r7.
   68 0000006E B2F9            uxtb             r1, r7
   69 00000070 FA5F F297       uxtb             r2, r7, ror #8
   70 00000074         ; usub8/sel is faster than cmp/it/conditional move.
   71 00000074 FAC2 F341       usub8            r3, r2, r1
   72 00000078 FAA2 F181       sel              r1, r2, r1
   73 0000007C FA5F F2A7       uxtb             r2, r7, ror #16
   74 00000080 FAC2 F341       usub8            r3, r2, r1
   75 00000084 FAA2 F181       sel              r1, r2, r1
   76 00000088 FA5F F2B7       uxtb             r2, r7, ror #24
   77 0000008C FAC2 F341       usub8            r3, r2, r1
   78 00000090 FAA2 F781       sel              r7, r2, r1
   79 00000094         
   80 00000094 6005            str              r5, [r0, #0]
   81 00000096 6046            str              r6, [r0, #4]
   82 00000098 6087            str              r7, [r0, #8]
   83 0000009A E8BD 0DF0       pop              {r4, r5, r6, r7, r8, r10, r11}
   84 0000009E 4770            bx               lr
   85 000000A0         
   86 000000A0         
   87 000000A0         ; void applyThreshold(uint8_t *out, uint8_t *in, uint32_
                       t stride, uint32_t threshold)
   88 000000A0         ;
   89 000000A0         ; Apply threshold to a 8x8 pixel block to create binariz
                       ed bitmap.
   90 000000A0         ; This relies heavily on ARM Cortex-M4 DSP instructions 
                       to achieve 3 cycles
   91 000000A0         ; per pixel performance.
   92 000000A0                 EXPORT           applyThreshold
   93 000000A0         applyThreshold
   94 000000A0 E92D 0DF0       push             {r4, r5, r6, r7, r8, r10, r11}
   95 000000A4         ; Copy threshold into each byte of r3.
   96 000000A4 F363 230F       bfi              r3, r3, #8, #8
   97 000000A8 F363 431F       bfi              r3, r3, #16, #16
   98 000000AC         ; r4 = 0x08040201 and r5 = 0x80402010. These are the bit
                        positions in the



ARM Macro Assembler    Page 3 


   99 000000AC         ; bitmap for each byte.
  100 000000AC F240 2401       mov              r4, #513
  101 000000B0 F6C0 0404       movt             r4, #2052
  102 000000B4 EA4F 1504       lsl              r5, r4, #4
  103 000000B8 F04F 0800       mov              r8, #0
  104 000000BC F05F 0B08       movs             r11, #8
  105 000000C0         
  106 000000C0         thresholdloop
  107 000000C0         ; Load a row (8 pixels) of the block.
  108 000000C0 E891 00C0       ldm              r1, {r6, r7}
  109 000000C4         ; Use usub8 to do a parallel compare and select bit set 
                       (from r4) or bit
  110 000000C4         ; clear (from r8).
  111 000000C4 FAC3 FA46       usub8            r10, r3, r6
  112 000000C8 FAA4 F688       sel              r6, r4, r8
  113 000000CC         ; Use usub8 to do a parallel compare and select bit set 
                       (from r5) or bit
  114 000000CC         ; clear (from r8).
  115 000000CC FAC3 FA47       usub8            r10, r3, r7
  116 000000D0 FAA5 F788       sel              r7, r5, r8
  117 000000D4         ; Pack all the set bits into a single byte.
  118 000000D4 FB76 F608       usad8            r6, r6, r8
  119 000000D8 FB77 6608       usada8           r6, r7, r8, r6
  120 000000DC         ; Store the row (8 pixels) in the bitmap.
  121 000000DC 7006            strb             r6, [r0]
  122 000000DE         ; Move to next row in block.
  123 000000DE 1889            adds             r1, r1, r2
  124 000000E0 08D6            lsrs             r6, r2, #3
  125 000000E2 1980            adds             r0, r0, r6
  126 000000E4 F1BB 0B01       subs             r11, r11, #1
  127 000000E8 D1EA            bne.n            thresholdloop
  128 000000EA         
  129 000000EA E8BD 0DF0       pop              {r4, r5, r6, r7, r8, r10, r11}
  130 000000EE 4770            bx               lr
  131 000000F0         
  132 000000F0                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\image_keil.d -o.\objects\image_keil.o -IC:\Users\B514
39\Desktop\gitResp\kk_use_cases\usecase\qrcode_zxing\usecase\zxing_lib\mdk\RTE 
-IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0-Beta4\Device\ARM\ARMCM4\Include -IC:\Keil
_v5\ARM\CMSIS\Include --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VE
RSION SETA 517" --predefine="ARMCM4_FP SETA 1" --list=.\listings\image_keil.lst
 ..\src\image_keil.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 3 in file ..\src\image_keil.s
   Uses
      None
Comment: .text unused
applyThreshold 000000A0

Symbol: applyThreshold
   Definitions
      At line 93 in file ..\src\image_keil.s
   Uses
      At line 92 in file ..\src\image_keil.s
Comment: applyThreshold used once
calculateBlockStatistics 00000000

Symbol: calculateBlockStatistics
   Definitions
      At line 16 in file ..\src\image_keil.s
   Uses
      At line 15 in file ..\src\image_keil.s
Comment: calculateBlockStatistics used once
statsloop 00000014

Symbol: statsloop
   Definitions
      At line 26 in file ..\src\image_keil.s
   Uses
      At line 52 in file ..\src\image_keil.s
Comment: statsloop used once
thresholdloop 000000C0

Symbol: thresholdloop
   Definitions
      At line 106 in file ..\src\image_keil.s
   Uses
      At line 127 in file ..\src\image_keil.s
Comment: thresholdloop used once
5 symbols
339 symbols in table
